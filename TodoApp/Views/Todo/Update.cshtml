@model TodoApp.Domain.Entities.Todo

@{
    ViewBag.Title = "Update";
}

<style>
    .form-control {
        max-width: 100% !important;
    }
</style>


<div class="container-fluid h-100 bg-black d-flex align-items-center justify-content-center">
    <div class="w-100 h-50 p-3 d-flex flex-column align-items-center gap-4">
        <h1 class="fs-1 text-white fw-bold">Update Status (Task)</h1>

        <form id="updateTodoForm"
              class="col-11 col-md-6 col-lg-4 d-flex flex-column gap-3 align-items-center">
            <div class="form-group col-12 d-flex justify-content-center">
                <input type="text"
                       placeholder="Name"
                       name="name"
                       value="@Model.Name"
                       disabled
                       class="form-control"
                       required />
            </div>
            <div class="form-group col-12 d-flex justify-content-center">
                <select name="status"
                        class="form-control"
                        required>
                    <option value="">Select Status</option>
                    <option value="Pending">Pending</option>
                    <option value="InProgress">In Progress</option>
                    <option value="Completed">Completed</option>

                </select>
            </div>
            <div class="form-group col-12 d-flex gap-3 mt-2 justify-content-center">
                <input type="submit"
                       value="Update"
                       class="btn btn-warning col-6"
                       required />
                <a href="@Url.Action("Index", "Todo")" class="btn btn-danger col-6">
                    Back
                </a>
            </div>
        </form>
    </div>
</div>

@functions{

    public string TokenHeaderValue()
    {
        string cookieToken, formToken;
        System.Web.Helpers.AntiForgery.GetTokens(null, out cookieToken, out formToken);
        return cookieToken + ":" + formToken;

    }
}

@section scripts{

    <script>


        document.getElementById("updateTodoForm").addEventListener("submit", async function (e) {

            e.preventDefault();

            const form = e.target;

            const status = form.status.value;

            try {
                const response = await fetch("@Url.Action("UpdateJson", "Todo")", {
                    method: "POST",
                    headers: {
                        "Content-type": "application/json",
                        "RequestVerificationToken": "@TokenHeaderValue()"
                    },
                    body: JSON.stringify({
                        TodoId: "@Model.Id",
                        Status: status,
                    })
                });

                const result = await response.json();

                if (result.success) {
                    window.location.href = result.redirectUrl;
                } else {
                    console.log(result)
                    alert(result.error || "Error Updating Todo")
                }

            } catch (err) {
                console.error(err);
                alert("Network Error")
            }
        })


    </script>


}